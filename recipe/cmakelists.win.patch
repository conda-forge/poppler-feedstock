--- CMakeLists.txt.old	2019-01-22 09:40:00.632449800 +1000
+++ CMakeLists.txt	2019-01-24 15:31:14.179024700 +1000
@@ -201,11 +201,18 @@
 endif()
 set(WITH_OPENJPEG FALSE)
 if(ENABLE_LIBOPENJPEG STREQUAL "openjpeg2")
-  find_package(LIBOPENJPEG2)
-  set(WITH_OPENJPEG ${LIBOPENJPEG2_FOUND})
+  # use find_package(OpenJPEG) which works on Windows
+  # rather than the bundled FindOPENJPEG2.cmake
+  find_package(OpenJPEG)
+  set(WITH_OPENJPEG ${OpenJPEG_FOUND})
+  set(LIBOPENJPEG2_FOUND ${OpenJPEG_FOUND})
   if(NOT LIBOPENJPEG2_FOUND)
     message(FATAL_ERROR "Install libopenjpeg2 before trying to build poppler. You can also decide to use the internal unmaintained JPX decoder or none at all.")
   endif()
+  # match what FindOPENJPEG2.cmake did
+  add_definitions(-DUSE_OPENJPEG2)
+  set(LIBOPENJPEG2_INCLUDE_DIRS ${OPENJPEG_INCLUDE_DIRS})
+  set(LIBOPENJPEG2_LIBRARIES ${OPENJPEG_LIBRARIES})
   set(HAVE_JPX_DECODER ON)
 elseif(ENABLE_LIBOPENJPEG STREQUAL "unmaintained")
   set(WITH_OPENJPEG OFF)
@@ -283,21 +290,10 @@
   include_directories(${LCMS2_INCLUDE_DIR})
 endif()
 
-# Recent versions of poppler-data install a .pc file.
-# Use it to determine the encoding data path, if available.
-# Default to the same prefix otherwise.
-pkg_check_modules(POPPLER_DATA poppler-data)
-if(POPPLER_DATA_FOUND)
-  execute_process(COMMAND "${PKG_CONFIG_EXECUTABLE}" --variable=poppler_datadir poppler-data
-                  RESULT_VARIABLE _result_var
-                  OUTPUT_VARIABLE _output_var OUTPUT_STRIP_TRAILING_WHITESPACE)
-  if(_result_var STREQUAL "0" AND NOT _output_var STREQUAL "")
-    set(POPPLER_DATADIR "${_output_var}")
-  endif()
-endif()
-if(NOT DEFINED POPPLER_DATADIR)
-  set(POPPLER_DATADIR "${CMAKE_INSTALL_PREFIX}/share/poppler")
-endif()
+# poppler-data is a noarch package that installs in %PREFIX%
+# rather than %LIBRARY_PREFIX% so won't be found. Hardcode
+# location for now
+set(POPPLER_DATADIR "$ENV{PREFIX}/share/poppler")
 
 if(EXTRA_WARN)
   set(CMAKE_C_FLAGS "-Wall ${CMAKE_C_FLAGS}")
@@ -485,8 +481,10 @@
 
 if(MSVC)
 add_definitions(-D_CRT_SECURE_NO_WARNINGS)
-set(CMAKE_CXX_FLAGS "/Zc:wchar_t- ${CMAKE_CXX_FLAGS}")
-add_library(poppler STATIC ${poppler_SRCS})
+# so we can determing if to import/export symbols
+add_library(poppler SHARED ${poppler_SRCS})
+target_compile_definitions(poppler PRIVATE _COMPILING_POPPLER=1)
+set_target_properties(poppler PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS true)
 else()
 add_library(poppler ${poppler_SRCS})
 endif()
@@ -676,6 +674,10 @@
 
 set(PKG_CONFIG_VERSION_0_18 TRUE)
 if(PKG_CONFIG_EXECUTABLE)
+  if(WIN32)
+    # need to run the copy with .bat on the end
+    STRING(CONCAT PKG_CONFIG_EXECUTABLE ${PKG_CONFIG_EXECUTABLE} ".bat")
+  endif()  
   exec_program(${PKG_CONFIG_EXECUTABLE} ARGS --version RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _output_VAR)
   macro_ensure_version("0.18" "${_output_VAR}" PKG_CONFIG_VERSION_0_18)
 endif()
